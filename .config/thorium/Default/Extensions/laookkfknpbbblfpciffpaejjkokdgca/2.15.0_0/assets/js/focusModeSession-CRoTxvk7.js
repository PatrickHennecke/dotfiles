import{d as t,w as e}from"./ResizeSensor-CXS_pGRc.js";import{p as s,s as a,M as o,C as i}from"./dashboard-CF_jRhAY.js";import{M as c}from"./timestampDb-sTUCijT1.js";import{a as n}from"./appDefinitions-C9Bxo8FM.js";import{u as r}from"./promisifiedChrome-CheD9WtZ.js";import"./environmentVariables-Cy83xda0.js";import"./main--IJuvtTE.js";import"./localStorage-B4mFdj8F.js";import"./preload-helper-D7CfCCEq.js";import"./Logger-Dqn8sDPg.js";import"./migrateLegacyUserMessageHandler-CU6TUnqH.js";import"./focusModeHelpers-Cqkll3ju.js";import"./reactiveCustomization-CrL2eTrh.js";import"./VueBase-CjPGMLuv.js";import"./index-CJJH83pl.js";import"./scenes-Bti57oYU.js";import"./wind-D3u4taeq.js";import"./string-KTo4Qfpe.js";const d=["pomodoro","siteBlocker","soundscapes","tabStash"];let p;const u=s((({loadedRef:e,updateAsync:s})=>t("focusModeSession",{state:()=>({start:1,stop:1,appActivationData:{},capacityLimitInfo:{msUsed:0,date:r.getDateOnly(new Date)},lastInteraction:Date.now(),totalTimeFocused:0}),getters:{focusModeActive:t=>!t.stop,loaded:()=>e.value,capacityLimitInfoForToday(){const t=this.capacityLimitInfo,e=m.models.date.get("date"),s=r.getDateOnly(e);return t.date!==s?{date:s,msUsed:0}:t},msUntilOverCapacityLimit(){const t=i,e=this.capacityLimitInfoForToday.msUsed,s=m.models.date.get("seconds").getTime();return t-(e+(this.focusModeActive?s-this.start:0))},isOverCapacityLimit(){return this.msUntilOverCapacityLimit<=0},shouldAutoDisable(){const t=m.models.date.get("date").getTime();return this.focusModeActive&&this.lastInteraction<t-o},totalTimeFocusedIncludingCurrentSession(){const t=m.models.date.get("date").getTime();let e=this.totalTimeFocused;return this.focusModeActive&&(e+=t-this.start),Math.max(e,0)}},actions:{async update(t){await s(t)},async stopAndSaveFocusMode(){const t=this.capacityLimitInfoForToday,e=Date.now(),s=e-this.start;t.msUsed+=s;const a=this.totalTimeFocused+s;await this.update({stop:e,capacityLimitInfo:t,totalTimeFocused:a,appActivationData:{}}),this.refreshLastInteraction({debounceTime:0})},async startAndSaveFocusMode(t){const e=this.capacityLimitInfoForToday;await this.update({start:Date.now(),stop:null,appActivationData:t,capacityLimitInfo:e}),this.refreshLastInteraction({debounceTime:0})},refreshLastInteraction({debounceTime:t=3e3}){this.focusModeActive&&(clearTimeout(p),p=window.setTimeout((()=>{this.update({lastInteraction:Date.now()})}),t))},async disableAppsBeforeStop(t){for(const e of d){const s=n[e];s.unsupported||await s.disable({enableResult:this.appActivationData[e],inactive:t})}}}})),{mode:c.Cache,syncAutomatically:!0}),l=u();e((()=>l.loaded),(t=>{t&&a.switchOverToWatchedStoreItem((()=>l.focusModeActive))}));const h=u,f=h(),y=()=>f;export{y as default,h as useFocusModeSessionStore};