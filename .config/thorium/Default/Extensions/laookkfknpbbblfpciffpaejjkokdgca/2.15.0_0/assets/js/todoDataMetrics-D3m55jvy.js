import{c as e,d as t,f as o}from"./ResizeSensor-CXS_pGRc.js";import"./environmentVariables-Cy83xda0.js";const a=e(""),r=t("todoStats",{state:()=>({loaded:!1}),getters:{todoCompletedSince(){return e=>{if(!this.loaded)return 0;if(a.value)return 0;const t=localStorage.getItem("todolist-1");if(!t)return 0;const o=t.split(",").reduce(((e,t)=>Object.assign(e,(e=>{const t=localStorage.getItem(e),o={};return t?(t.split(",").forEach((t=>{o[t]=localStorage.getObject(`${e}-${t}`)})),o):o})("todo-"+t))),{});return Object.values(o).filter((t=>t.done&&new Date(t.completedDate).getTime()>e)).length}},unsupportedMetrics:()=>a.value?["todoCompletedSince"]:[]},actions:{refresh(){(async()=>{const e=await m.widgetManager.getWidgetAsync("todo"),t=(await e.manager.getMomoLists()).getListOfType("done"),r=()=>e.todoList.model.activeProvider.get("provider_url");m.on("todo:providerChanged",(()=>{null==t||t.doFetchIfNeeded(!0),a.value=r()})),m.on("todo:loadingStateChange",(()=>o(a))),r()||null==t||t.doFetchIfNeeded(),a.value=r(),this.loaded=!0})()}}}),d=()=>r();export{d as default};